'use client';

import React, {useEffect, useState} from "react";
import { Calendar } from 'primereact/calendar';
import { InputText } from 'primereact/inputtext';
import { Button } from "primereact/button";
import { DataTable } from 'primereact/datatable';
import { Column } from 'primereact/column';
import OrdersAPI from "../../../api/waiter-api/OrdersAPI";
import {Dialog} from "primereact/dialog";
import RestaurantAPI from "../../../api/admin-api/RestaurantsAPI";

interface Order {
    id: string,
    meals: Meal[];
    totalPrice: number;
    status: string;
    diningTable: string;
}

interface Meal {
    id: string;
    name: string;
    description: string;
    price: number;
}

const OrdersPage = () => {
    const [dateFrom, setDateFrom] = useState<Date | null>(null);
    const [dateTo, setDateTo] = useState<Date | null>(null);
    const [expandedRows, setExpandedRows] = useState(null);

    const [isModalVisible, setIsModalVisible] = useState(false);
    const [meals, setMeals] = useState<Meal[]>([]);
    const [totalPrice, setTotalPrice] = useState(0);
    const [status, setStatus] = useState('');
    const [diningTable, setDiningTable] = useState('');

    const [orders, setOrders] = useState<Order[]>([]);
    const [loading, setLoading] = useState<boolean>(true);
    const [error, setError] = useState<string | null>(null);

    const [isEditMode, setIsEditMode] = useState(false);

    const fetchOrders = async () => {
        // fetch orders from the server
        const api = new OrdersAPI('http://localhost:8080');
        try {
            const data = await api.retrieveAllOrders();
            setOrders(data);
        } catch (err) {
            setError('Error fetching restaurants');
            console.error(err);
        } finally {
            setLoading(false);
        }
    };

    useEffect(() => {
        fetchOrders();
    }, []);

    const actionBodyTemplate = (rowData: Order) => {
        return (
            <div className="actions">
                <Button className="p-button-success" icon="pi pi-pencil" />
                <Button className="p-button-danger" icon="pi pi-trash" />
            </div>
        );
    }

    const handleModalToggle = () => {
        setIsModalVisible(!isModalVisible);
    }

    const renderModalContent = () => {
        return (
            <div>
                <Dialog
                    header={isEditMode ? "Edit Restaurant" : "Add New Restaurant"}
                    visible={isModalVisible}
                    style={{ width: '50vw' }}
                    onHide={() => {
                        handleModalToggle();
                        // Reset edit mode when hiding the modal
                        setIsEditMode(false);
                    }}>
                    <div className="card p-fluid">
                        <div className="field">
                            <label htmlFor="status">Status</label>
                            <InputText id="status" type="text" value={status} onChange={(e) => setStatus(e.target.value)} />
                        </div>
                        <div className="field">
                            <Button label="Submit" className="p-button-success" size="small" icon="pi pi-check" onClick={handleSubmit} />
                        </div>
                    </div>
                </Dialog>
            </div>
        );
    }

    const handleSubmit = async () => {

        const api = new OrdersAPI('http://localhost:8080');
        if (meals.length === 0) {
            alert("Cannot add an order without meals. Please add at least one meal.");
            return; // Prevents submission if there are no meals
        }

        // Construct the restaurant object
        const order: Order = {
            id: '', // Assuming the ID is generated by the backend
            meals: meals,
            totalPrice: totalPrice,
            status: status,
            diningTable: diningTable,
        };

        try {
            // Call the API to save the restaurant
            const response = await api.saveOrder(order);
            console.log(response); // Or handle the successful save as needed
            setIsModalVisible(false); // Close the modal on success
            // You might want to refresh your restaurant list here or emit an event that causes a parent component to do so
        } catch (error) {
            console.error('Failed to save restaurant:', error);
            // Handle the error state in the UI, such as displaying an error message
        }
    };

    const rowExpansionTemplate = (data) => {
        return (
            <div className="reservation-details">
                {/* You can structure your detailed view here */}
                <h5>Reservation Details</h5>
                <p>Name: {data.customerName}</p>
                <p>Address: {data.customerAddress}</p>
                {/* ... other details */}
            </div>
        );
    };

    const onRowToggle = (e) => {
        const dataKey = e.data.id; // Assuming 'id' is the unique key in your data
        setExpandedRows(expandedRows === dataKey ? null : dataKey);
    };

    return (
        <div className="grid">
            <div className="col-12">
                <div className="card">
                    <h5>Orders</h5>
                    <div className="grid">
                        <div className='col-3'>
                            <div className="field grid">
                                <label htmlFor="name3" className="col-12 mb-2 md:col-2 md:mb-0">
                                    From
                                </label>
                                <div className="col-12 md:col-10">
                                    <Calendar value={dateFrom} onChange={(e) => setDateFrom(e.value as Date)} showIcon />
                                </div>
                            </div>
                            <div className="field grid">
                                <label htmlFor="email3" className="col-12 mb-2 md:col-2 md:mb-0">
                                    To
                                </label>
                                <div className="col-12 md:col-10">
                                    <Calendar value={dateTo} onChange={(e) => setDateTo(e.value as Date)} showIcon />
                                </div>
                            </div>
                            <div className="field grid">
                                <Button label="Search" className="p-button-success" style={{ width: '100%' }} />
                            </div>
                            <div className="field grid">
                                <div className="col-12">
                                    <h6>Cancelled: </h6>
                                </div>
                                <div className="col-12">
                                    <h6>Confirmed: </h6>
                                </div>
                                <div className="col-12">
                                    <h6>Abandoned: </h6>
                                </div>
                                <div className="col-12">
                                    <h6>Checked In:</h6>
                                </div>
                            </div>
                        </div>
                        <div className="col-9">
                            <DataTable value={reservations} expandedRows={expandedRows ? {[expandedRows]: true} : null}
                                       onRowToggle={onRowToggle} rowExpansionTemplate={rowExpansionTemplate}
                                       dataKey="id">
                                <Column expander style={{ width: '3em' }} />
                                <Column field="reservationId" header="Order ID" />
                                <Column field="date" header="Date" />
                                <Column field="personCount" header="Person Count" />
                                <Column field="status" header="Status" />
                            </DataTable>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    );
};

export default ReservationsPage;
