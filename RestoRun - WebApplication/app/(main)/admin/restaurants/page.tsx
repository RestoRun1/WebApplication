'use client';
import { DataTable } from 'primereact/datatable';
import { Column } from 'primereact/column';
import React, { useEffect } from 'react';
import { Button } from 'primereact/button';
import { Dialog } from 'primereact/dialog';
import { InputText } from 'primereact/inputtext';
import { useState } from 'react';
import axios from 'axios';
import RestaurantAPI from '../../../api/admin-api/RestaurantsAPI';


interface Restaurant {
    id: string;
    name: string;
    address: string;
    email: string;
    phoneNumber: string;
  }

const RestaurantsPage = () => {

    

    const [isModalVisible, setIsModalVisible] = useState(false);
    const [name, setName] = useState('');
    const [email, setEmail] = useState('');
    const [phone, setPhone] = useState('');
    const [address, setAddress] = useState('');

    const [restaurants, setRestaurants] = useState<Restaurant[]>([]);
    const [loading, setLoading] = useState<boolean>(true);
    const [error, setError] = useState<string | null>(null);

    const [isEditMode, setIsEditMode] = useState(false);


    
    const fetchRestaurants = async () => {
        const api = new RestaurantAPI('http://localhost:8080');
        try {
          const data = await api.retrieveAllRestaurants();
          setRestaurants(data);
        } catch (err) {
          setError('Error fetching restaurants');
          console.error(err);
        } finally {
          setLoading(false);
        }
      };

      // use effect to fetch data from the server. the endpoints are listed in RestaurantAPI.tsx
    useEffect(() => {      
        fetchRestaurants();
    }, []);

    

    const actionBodyTemplate = (rowData: Restaurant) => {
        // find me an icon in prime react which represents banning a user and add it to the actionBodyTemplate
        return (
            <div className="actions">
                <Button className="p-button-success" icon="pi pi-pencil" onClick={() => handleEdit(rowData)} />
                <Button className="p-button-danger" icon="pi pi-trash" onClick={() => handleDelete(rowData.id)} />
            </div>
        );
    }

    const handleModalToggle = () => {
        setIsModalVisible(!isModalVisible);
    };

    const renderModalContent = () => {
        return (
            <div>
                <Dialog 
                    header={isEditMode ? "Edit Restaurant" : "Add New Restaurant"}
                    visible={isModalVisible} 
                    style={{ width: '50vw' }} 
                    onHide={() => {
                        handleModalToggle();
                        // Reset edit mode when hiding the modal
                        setIsEditMode(false);
                    }}>
                    <div className="card p-fluid">
                        <div className="field">
                            <label htmlFor="name1">Name</label>
                            <InputText id="name1" type="text" value={name} onChange={(e) => setName(e.target.value)} />
                        </div>
                        <div className="field">
                            <label htmlFor='address'>Address</label>
                            <InputText id="address" type="text" value={address} onChange={(e) => setAddress(e.target.value)} />
                        </div>
                        <div className="field">
                            <label htmlFor="email1">Email</label>
                            <InputText id="email1" type="text" value={email} onChange={(e) => setEmail(e.target.value)} />
                        </div>
                        <div className="field">
                            <label htmlFor="phone">Phone</label>
                            <InputText id="phone" type="text" value={phone} onChange={(e) => setPhone(e.target.value)} />
                        </div>
                        <div className="field">
                            <Button label="Submit" className="p-button-success" size="small" icon="pi pi-check" onClick={handleSubmit} />
                        </div>
                    </div>
                </Dialog>
            </div>
        );
    }

    const handleSubmit = async () => {

        const api = new RestaurantAPI('http://localhost:8080');

        // Construct the restaurant object
        const restaurant: Restaurant = {
          id: '', // Assuming the ID is generated by the backend
          name: name,
          address: address,
          email: email,
          phoneNumber: phone,
        };
    
        try {
          // Call the API to save the restaurant
          const response = await api.saveRestaurant(restaurant);
          console.log(response); // Or handle the successful save as needed
          setIsModalVisible(false); // Close the modal on success
          // You might want to refresh your restaurant list here or emit an event that causes a parent component to do so
        } catch (error) {
          console.error('Failed to save restaurant:', error);
          // Handle the error state in the UI, such as displaying an error message
        }
    };

    // Example handler functions for actions
    const handleEdit = (rowData: Restaurant) => {
        console.log('Edit action for:', rowData);
        
        setName(rowData.name);
        setAddress(rowData.address);
        setEmail(rowData.email);
        setPhone(rowData.phoneNumber);
        setIsEditMode(true);  // Set edit mode to true
        setIsModalVisible(true);
    };
    

    const handleDelete = async (id: string) => {
        const api = new RestaurantAPI('http://localhost:8080');
        console.log('Delete action for ID:', id);
    
        if (!id) {
            console.error('Error: No valid restaurant ID provided for deletion.');
            return;
        }
    
        try {
            // Call deleteRestaurant from your API class
            await api.deleteRestaurant(id);
            console.log('Restaurant deleted successfully');
    
            // Optionally, refresh the list of restaurants or update the UI accordingly
            fetchRestaurants();
            
        } catch (error) {
            console.error('Failed to delete restaurant:', error); // Improved error logging
            // Optionally, handle UI feedback for the error
        }
    };

    
    return (
        <div className="grid">
            <div className="col-12">
                <div className="card">
                    <div className="col-6">
                            <h4>Manage Restaurants</h4> 
                    </div>
                        <div className="col-6">
                            <Button label="Add New Restaurant" className="p-button-success" size="small" icon="pi pi-plus" onClick={handleModalToggle} />
                    </div>     
                    {renderModalContent()}
                    <DataTable value={restaurants} stripedRows style={{ minWidth: '50rem' }}>
                        
                        <Column field="name" header="Name" />
                        <Column field="email" header="Email" />
                        <Column field="address" header="Address" />
                        <Column field="phoneNumber" header="Phone" />
                        <Column header="Actions" body={actionBodyTemplate} />
                    </DataTable>
                </div>
            </div>
        </div>
    );
};

export default RestaurantsPage;
